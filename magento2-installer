#!/bin/bash

. config.env

AUTH_JSON_FILE="/root/.composer/auth.json"
CDIR=$(pwd)

[ "$DEBUG" = "true" ] && set -x


echo
echo "Magento 2 install sript"
echo

MAGENTO_ROOT=${MAGENTO_ROOT:-./}
#M2SETUP_DOMAIN=${M2SETUP_DOMAIN}

echo MAGENTO_ROOT=$MAGENTO_ROOT
echo M2SETUP_DOMAIN=$M2SETUP_DOMAIN
echo M2SETUP_BASE_URL=$M2SETUP_BASE_URL
echo M2SETUP_INSTALL_DB=$M2SETUP_INSTALL_DB
echo M2SETUP_BACKEND_FRONTNAME=$M2SETUP_BACKEND_FRONTNAME
echo M2SETUP_ADMIN_FIRSTNAME=$M2SETUP_ADMIN_FIRSTNAME
echo M2SETUP_ADMIN_LASTNAME=$M2SETUP_ADMIN_LASTNAME
echo M2SETUP_ADMIN_EMAIL=$M2SETUP_ADMIN_EMAIL
echo M2SETUP_ADMIN_USER=$M2SETUP_ADMIN_USER
echo M2SETUP_ADMIN_PASSWORD=$M2SETUP_ADMIN_PASSWORD
echo M2SETUP_VERSION=$M2SETUP_VERSION
echo M2SETUP_USE_SAMPLE_DATA=$M2SETUP_USE_SAMPLE_DATA
echo MYSQL_DB_HOST=$MYSQL_DB_HOST
echo MYSQL_ROOT_PASSWORD=$MYSQL_ROOT_PASSWORD
echo MYSQL_DATABASE=$MYSQL_DATABASE
echo MYSQL_USER=$MYSQL_USER
echo MYSQL_PASSWORD=$MYSQL_PASSWORD
echo REPO_URL=$REPO_URL

while true; do
    read -p "Do you wish to continue? (y/N)" yn
    case $yn in
        [Yy]* ) break;;
        [Nn]* ) exit;;
        * ) exit;;
    esac
done


#mysqld --user=mysql --skip-networking --socket=/var/run/mysqld/mysqld.sock &
#/etc/init.d/mysql start
#pid="$!"

mysql=( mysql -uroot )
if [ ! -z "$MYSQL_ROOT_PASSWORD" ]; then
	mysql+=( -p"${MYSQL_ROOT_PASSWORD}" )
fi

for i in {30..0}; do
	if echo 'SELECT 1' | "${mysql[@]}" &> /dev/null; then
		break
	fi
	echo 'MySQL init process in progress...'
	sleep 1
done

if [ "$i" = 0 ]; then
	echo >&2 'MySQL init process failed.'
	exit 1
fi

echo 'MySQL init OK'

#"${mysql[@]}" <<-EOSQL
#	-- What's done in this file shouldn't be replicated
#	--  or products like mysql-fabric won't work
#	SET @@SESSION.SQL_LOG_BIN=0;

#	DELETE FROM mysql.user ;
#	CREATE USER 'root'@'%' IDENTIFIED BY '${MYSQL_ROOT_PASSWORD}' ;
#	GRANT ALL ON *.* TO 'root'@'%' WITH GRANT OPTION ;
#	DROP DATABASE IF EXISTS test ;
#	FLUSH PRIVILEGES ;
#EOSQL



echo "Creating database and user..."

if [ "$MYSQL_DATABASE" ]; then
	echo "CREATE DATABASE IF NOT EXISTS \`$MYSQL_DATABASE\` ;" | "${mysql[@]}"
	mysql+=( "$MYSQL_DATABASE" )
fi

if [ "$MYSQL_USER" -a "$MYSQL_PASSWORD" ]; then
	echo "CREATE USER '$MYSQL_USER'@'%' IDENTIFIED BY '$MYSQL_PASSWORD' ;" | "${mysql[@]}"

	if [ "$MYSQL_DATABASE" ]; then
		echo "GRANT ALL ON \`$MYSQL_DATABASE\`.* TO '$MYSQL_USER'@'%' ;" | "${mysql[@]}"
	fi

	echo 'FLUSH PRIVILEGES ;' | "${mysql[@]}"
fi

    if [ "$MYSQL_USER" -a "$MYSQL_PASSWORD" ]; then
        echo "CREATE USER '$MYSQL_USER'@'localhost' IDENTIFIED BY '$MYSQL_PASSWORD' ;" | "${mysql[@]}"

        if [ "$MYSQL_DATABASE" ]; then
            echo "GRANT ALL ON \`$MYSQL_DATABASE\`.* TO '$MYSQL_USER'@'localhost' ;" | "${mysql[@]}"
        fi

        echo 'FLUSH PRIVILEGES ;' | "${mysql[@]}"
    fi

#/etc/init.d/mysql stop
echo
echo 'MySQL init process done.'
echo

# start mysql server
#echo "Starting MySQL server..."
#/etc/init.d/mysql start


# Ensure our Magento directory exists
mkdir -p $MAGENTO_ROOT
chown www-data:www-data $MAGENTO_ROOT

# If asked, we'll ensure that the www-data is set to the same uid/gid as the
# mounted volume.  This works around permission issues with virtualbox shared
# folders.
if [[  ! -f "$MAGENTO_ROOT/composer.json" && "$UPDATE_UID_GID" = "true" ]]; then
    echo "Updating www-data uid and gid"

    DOCKER_UID=`stat -c "%u" $MAGENTO_ROOT`
    DOCKER_GID=`stat -c "%g" $MAGENTO_ROOT`

    INCUMBENT_USER=`getent passwd $DOCKER_UID | cut -d: -f1`
    INCUMBENT_GROUP=`getent group $DOCKER_GID | cut -d: -f1`

    echo "Docker: uid = $DOCKER_UID, gid = $DOCKER_GID"
    echo "Incumbent: user = $INCUMBENT_USER, group = $INCUMBENT_GROUP"

    # Once we've established the ids and incumbent ids then we need to free them
    # up (if necessary) and then make the change to www-data.

    #[ ! -z "${INCUMBENT_USER}" ] && usermod -u 99$DOCKER_UID $INCUMBENT_USER
    #usermod -u $DOCKER_UID www-data

    #[ ! -z "${INCUMBENT_GROUP}" ] && groupmod -g 99$DOCKER_GID $INCUMBENT_GROUP
    #groupmod -g $DOCKER_GID www-data
fi

# Configure Sendmail if required
#if [ "$ENABLE_SENDMAIL" == "true" ]; then
#    /etc/init.d/sendmail start
#fi


# Configure PHP
#[ ! -z "${PHP_MEMORY_LIMIT}" ] && sed -i "s/!PHP_MEMORY_LIMIT!/${PHP_MEMORY_LIMIT}/" /usr/local/etc/php/conf.d/zz-magento.ini

#[ "$PHP_ENABLE_XDEBUG" = "true" ] && \
#    docker-php-ext-enable xdebug && \
#    echo "Xdebug is enabled"

# Configure PHP-FPM
#[ ! -z "${MAGENTO_RUN_MODE}" ] && sed -i "s/!MAGENTO_RUN_MODE!/${MAGENTO_RUN_MODE}/" /usr/local/etc/php-fpm.conf

# Configure composer
[ ! -z "${COMPOSER_GITHUB_TOKEN}" ] && \
    composer config --global github-oauth.github.com $COMPOSER_GITHUB_TOKEN

[ ! -z "${COMPOSER_MAGENTO_USERNAME}" ] && \
    composer config --global http-basic.repo.magento.com \
        $COMPOSER_MAGENTO_USERNAME $COMPOSER_MAGENTO_PASSWORD

#Install Magento
if [ -f "$AUTH_JSON_FILE" ]; then
    # Get composer auth information into an environment variable to avoid "you need
    # to be using an interactive terminal to authenticate".
    COMPOSER_AUTH=`cat $AUTH_JSON_FILE`
fi

MAGENTO_COMMAND="$MAGENTO_ROOT/bin/magento"

if [ ! -f "$MAGENTO_ROOT/composer.json" ]; then
    echo "Creating Magento ($M2SETUP_VERSION) project from composer"

    composer create-project \
        --repository-url=https://repo.magento.com/ \
         magento/project-community-edition=$M2SETUP_VERSION \
        --no-interaction \
        $MAGENTO_ROOT

    chmod +x "$MAGENTO_ROOT/bin/magento"

    if [ ! "$M2SETUP_INSTALL_DB" = "false" ]; then

        echo "Install Magento"

        INSTALL_COMMAND="$MAGENTO_COMMAND setup:install \
            --db-host=$MYSQL_DB_HOST \
            --db-name=$MYSQL_DATABASE \
            --db-user=$MYSQL_USER \
            --db-password=$MYSQL_PASSWORD \
            --base-url=$M2SETUP_BASE_URL \
            --backend-frontname=$M2SETUP_BACKEND_FRONTNAME \
            --admin-firstname=$M2SETUP_ADMIN_FIRSTNAME \
            --admin-lastname=$M2SETUP_ADMIN_LASTNAME \
            --admin-email=$M2SETUP_ADMIN_EMAIL \
            --admin-user=$M2SETUP_ADMIN_USER \
            --admin-password=$M2SETUP_ADMIN_PASSWORD"

        if [ "$M2SETUP_USE_SAMPLE_DATA" = "true" ]; then
            $MAGENTO_COMMAND sampledata:deploy
            composer --working-dir=$MAGENTO_ROOT update
            INSTALL_COMMAND="$INSTALL_COMMAND --use-sample-data"
        fi

        $INSTALL_COMMAND

    if [ ! -z "$REPO_URL" ]; then
        cd $MAGENTO_ROOT/
        git init
        git remote add origin $REPO_URL
        mkdir -p /tmp/boomerang/etc && cp app/etc/env.php /tmp/boomerang/etc/ && cp app/etc/config.php /tmp/boomerang/etc/
        install -D $MAGENTO_ROOT/app/etc/env.php /tmp/boomerang/etc/env.php
        install -D $MAGENTO_ROOT/app/etc/config.php /tmp/boomerang/etc/config.php
        git clean -d -fx
        git pull origin master
        install -D /tmp/boomerang/etc/env.php $MAGENTO_ROOT/app/etc/env.php
        install -D /tmp/boomerang/etc/config.php $MAGENTO_ROOT/app/etc/config.php
        composer --working-dir=$MAGENTO_ROOT update
        chmod +x "$MAGENTO_ROOT/bin/magento"
        $MAGENTO_COMMAND cache:clean
        $MAGENTO_COMMAND cache:flush
        $MAGENTO_COMMAND setup:upgrade
        $MAGENTO_COMMAND setup:di:compile
        #uploading database
        mysql -u$MYSQL_USER -p$MYSQL_PASSWORD -h$MYSQL_DB_HOST $MYSQL_DATABASE  < $MAGENTO_ROOT/app/ExternalFiles/*.sql
    fi

    $MAGENTO_COMMAND index:reindex
    $MAGENTO_COMMAND setup:static-content:deploy

eval "cat <<EOF
$(<template.txt)
EOF
" 2> /dev/null > /etc/apache2/sites-available/${M2SETUP_DOMAIN}.conf

    else
        echo "Skipping DB installation"
    fi

#here you can install any additional Magento modules you need, for example

#    echo "Installing magento 2 bashconsole/shopfinder module"
#    composer --working-dir=$MAGENTO_ROOT config repositories.bashconsole vcs https://github.com/bashconsole/shopfinder/
#    composer --working-dir=$MAGENTO_ROOT config minimum-stability dev
#    composer --working-dir=$MAGENTO_ROOT require bashconsole/shopfinder
#    composer --working-dir=$MAGENTO_ROOT config minimum-stability alpha
#    composer --working-dir=$MAGENTO_ROOT update
#    $MAGENTO_COMMAND module:enable Bashconsole_Shopfinder
#    $MAGENTO_COMMAND setup:upgrade
#    $MAGENTO_COMMAND setup:static-content:deploy

else
    echo "Magento installation found in $MAGENTO_ROOT, installing composer dependencies"
    composer --working-dir=$MAGENTO_ROOT install
#update magento base url from environment variable
    $MAGENTO_COMMAND setup:store-config:set --base-url=$M2SETUP_BASE_URL
    $MAGENTO_COMMAND setup:store-config:set --base-url-secure="https://${M2SETUP_BASE_URL#http://}"
    $MAGENTO_COMMAND cache:flush
fi

echo "Fixing file permissions.."

chown -R www-data:www-data $MAGENTO_ROOT

[ -f "$MAGENTO_ROOT/vendor/magento/framework/Filesystem/DriverInterface.php" ] \
  && sed -i 's/0770/0775/g' $MAGENTO_ROOT/vendor/magento/framework/Filesystem/DriverInterface.php

[ -f "$MAGENTO_ROOT/vendor/magento/framework/Filesystem/DriverInterface.php" ] \
  && sed -i 's/0660/0664/g' $MAGENTO_ROOT/vendor/magento/framework/Filesystem/DriverInterface.php

find $MAGENTO_ROOT/pub -type f -exec chmod 664 {} \;
find $MAGENTO_ROOT/pub -type d -exec chmod 775 {} \;
find $MAGENTO_ROOT/var/generation -type d -exec chmod g+s {} \;

ln -s /etc/apache2/sites-available/${M2SETUP_DOMAIN}.conf /etc/apache2/sites-enabled/${M2SETUP_DOMAIN}
/etc/init.d/apache2 restart

echo "Installation complete"


